@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor



<style>
    .modal-dialog {
        max-width: 110% !important;
        height: 100%;
        padding: 0;
        margin: 0;
    }

    .modal {
        padding-right: 4px !important;
        padding: .5%;
    }

    #image {
        transition: transform 0.2s; /* Smooth scaling effect */
        margin: auto; /* Center the image horizontally */
        display: block; /* Make the image a block element to center it */
        max-width: 100%; /* Make the image width adjustable */
        height: auto; /* Make the image height adjustable */
    }
    /* The container */
    .container {
        display: block;
        position: relative;
        padding-left: 35px;
        margin-bottom: 12px;
        cursor: pointer;
        font-size: 12px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

        /* Hide the browser's default radio button */
        .container input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
        }

    /* Create a custom radio button */
    .checkmark {
        position: absolute;
        top: 0;
        left: 0;
        height: 25px;
        width: 25px;
        background-color: #eee;
        border-radius: 50%;
    }

    /* On mouse-over, add a grey background color */
    .container:hover input ~ .checkmark {
        background-color: #ccc;
    }

    /* When the radio button is checked, add a blue background */
    .container input:checked ~ .checkmark {
        background-color: #2196F3;
    }

    /* Create the indicator (the dot/circle - hidden when not checked) */
    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }

    /* Show the indicator (dot/circle) when checked */
    .container input:checked ~ .checkmark:after {
        display: block;
    }

    #detail, #detail2 {
        width: 100%;
        height: 70px;
    }

    /* Style the indicator (dot/circle) */
    .container .checkmark:after {
        top: 9px;
        left: 9px;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: white;
    }

    #modal_layer {
        overflow-y: scroll;
    }
    /* Green */
    .success {
        border: 3px solid;
        border-color: #04AA6D;
        color: green;
    }

    .clicked_success {
        background-color: #04AA6D;
        color: white;
    }

    .success:hover {
        background-color: #04AA6D;
        color: white;
    }

    /* Blue */
    .info {
        border-color: #2196F3;
        color: dodgerblue;
    }


    /* Orange */
    .warning {
        border: 3px solid;
        border-color: #ff9800;
        color: orange;
    }

    .clicked_warning {
        background-color: #ff9800;
        color: white;
    }

    .warning:hover {
        background: #ff9800;
        color: white;
    }

    /* Red */
    .danger {
        border: 3px solid;
        border-color: #f44336;
        color: red;
    }

    .clicked_danger {
        background: #f44336;
        color: white;
    }

    .danger:hover {
        background: #f44336;
        color: white;
    }

    label.actual-btn {
        display: inline-block;
        color: white;
        padding: 0.5rem;
        font-family: sans-serif;
        border-radius: 0.3rem;
        cursor: pointer;
        width: 100px;
        height: 30px;
        font-size: 12px;
        text-align: center;
    }

    button.actual-btn {
        display: inline-block;
        background-color: #3dcd58;
        color: white;
        padding: 0.5rem;
        font-family: sans-serif;
        border-radius: 0.3rem;
        cursor: pointer;
        width: 100px;
        height: 30px;
        font-size: 12px;
        text-align: center;
    }

    #file-chosen {
        margin-left: 0.3rem;
        font-family: sans-serif;
    }

    label.actual-btnn {
        display: inline-block;
        background-color: #3dcd58;
        color: white;
        padding: 0.5rem;
        font-family: sans-serif;
        border-radius: 0.3rem;
        cursor: pointer;
        width: 100px;
        height: 30px;
        font-size: 12px;
        text-align: center;
    }

    #file-chosenn {
        margin-left: 0.3rem;
        font-family: sans-serif;
    }
</style>
<div class="content">
    <div class="container-fluid">
        <div class="row pt-2">
            <div class="col-lg-12 mt-2 mb-2">
                <div class="card card-success">
                    <div class="card-body">
                        <!-- Header -->
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="d-flex ">
                                <h2 class="text-dark"><i class='fas fa-chart-area text-success'></i>&nbsp;New</h2>
                                <h2 class="text-dark">&nbsp;Request</h2>
                            </div>
                            <div>
                                <button class="btn btn-primary btn-sm" onclick="Upload_Excel()">
                                    <i class="fa fa-upload"></i> Upload Excel
                                </button>
                            </div>
                        </div>

                        <!-- Form Body -->
                        <div class="modal-body">
                            <div class="row ml-2 mr-2">
                                <div class="col-6">
                                    <div class="form-group">
                                        <label style="font-size:10pt; font-weight:bold;">Request ID</label>
                                        <input type="text" id="req_id" value="@ViewBag.req_id" class="form-control form-control-sm" disabled />
                                    </div>
                                </div>

                                <div class="col-6">
                                    <div class="form-group">
                                        <label style="font-size:10pt; font-weight:bold;">Requestor</label>
                                        <input type="text" id="justshowusername" value='@HttpContextAccessor.HttpContext.Session.GetString("name")' class="form-control form-control-sm" disabled />
                                        <input type="text" id="usr_sesa" value='@HttpContextAccessor.HttpContext.Session.GetString("sesa_id")' class="form-control form-control-sm" disabled hidden />
                                    </div>
                                </div>

                                <!-- Main Form Content -->
                                <div class="col-12">
                                    <div class="card card-outline" id="scan">
                                        <div class="card-body">
                                            <!-- Header Part Information -->
                                            <div class="row mb-3">
                                                <div class="col-12">
                                                    <h5 class="text-dark">
                                                        <i class="fa fa-info-circle mr-2 text-success"></i>Part Information
                                                    </h5>
                                                </div>
                                            </div>

                                            <!-- Form fields -->
                                            <div class="row">
                                                <!-- Part ID and Rack ID -->
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label>Reference<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="referenceAdd"></select>
                                                    </div>
                                                </div>
                                                <div class="col-md-2">
                                                    <div class="form-group">
                                                        <label>Rack<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="rackAdd"></select>
                                                    </div>
                                                </div>
                                                <div class="col-md-2">
                                                    <div class="form-group">
                                                        <label>Row<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="rowAdd"></select>
                                                    </div>
                                                </div>
                                                <div class="col-md-2">
                                                    <div class="form-group">
                                                        <label>Column<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="columnAdd"></select>
                                                    </div>
                                                </div>

                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label>Box Type<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="boxtypedAdd"></select>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label>Quantity<span class="text-danger">*</span></label>
                                                        <input class="form-control" type="number" id="qtyxx2" placeholder="Input Quantity" />
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label>PIC<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="PICAdd" onchange="disDeptCheck(this);"></select>
                                                    </div>
                                                </div>
                                                <!-- Maximum Stay, Part Type, and PPAP -->
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label>Maximum Stay<span class="text-danger">*</span></label>
                                                        <div class="input-group date" id="datetimepicker1" data-target-input="nearest">
                                                            <input type="text" class="form-control datetimepicker-input" id="max_aging" data-target="#datetimepicker1" placeholder="Input Maximum Stay" />
                                                            <div class="input-group-append" data-target="#datetimepicker1" data-toggle="datetimepicker">
                                                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label>Remark<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="remarkAdd" onchange="disDeptCheck(this);"></select>
                                                    </div>
                                                </div>

                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label id="ppapLabel">PPAP</label>
                                                        <input type="text" id="ppapAdd" class="form-control" placeholder="Input PPAP" disabled />
                                                    </div>
                                                </div>

                                                <!-- Issue Information -->
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label>Source Issue<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="issuesource"></select>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label>Issue Category<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="issuecategory"></select>
                                                    </div>
                                                </div>
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label>Issue Detail<span class="text-danger">*</span></label>
                                                        <textarea class="form-control" id="issuedesc" rows="3" placeholder="Input Issue Detail"></textarea>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row mt-3">
                                                <div class="col-12">
                                                    <hr>
                                                    <h5 class="text-dark">
                                                        <i class="fa fa-camera mr-2 text-success mb-3"></i>Rack-Finding Picture
                                                    </h5>
                                                </div>
                                                <div class="col-6">
                                                    <div class="form-group">
                                                        <div class="mr-5 d-flex text-center align-items-center justify-content-center">
                                                            <div id="file_section">
                                                                <input onchange="readimgadd(this);" type="file" name="file" accept=".jpg, .bmp, .png, .jfif" id="actual-btn" hidden />
                                                                <label for="actual-btn" class="actual-btn btn-info">Choose file</label><br />
                                                                <span id="file-chosen" style="width:100%;">No File Chosen</span>
                                                                <button id="reset-btn" class="btn btn-sm btn-danger text-white" style="display: none;">Hapus</button>
                                                                </br>
                                                                <label style="font-size: 6pt">Make sure the image that will be uploaded<br />has size less than 1 MB.</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="form-group">
                                                        <div class="ml-5 d-flex text-center align-items-center justify-content-center">
                                                            <div id="file_section111">
                                                                <button name="btn_ng_take" id="btn_ng_take" hidden></button>
                                                                <label for="btn_ng_take" class="actual-btn btn-info">Take A Picture</label><br />
                                                                <span id="picture-taken" style="width:100%;">No Picture Taken</span>
                                                                <button id="reset-taken" class="btn btn-sm btn-danger text-white" style="display: none;">Hapus</button>
                                                                </br>
                                                                <label style="font-size: 6pt">Make sure the image that will be taken<br />clear and not blurry.</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-12">
                                                    <div class="form-group">
                                                        <p style="font-size:10pt; font-weight:bold;" class="text-center">Preview</p>
                                                        <div class="d-flex text-center align-items-center justify-content-center">
                                                            <img id="img-preview" src="~/assets/CameraNG.png" alt="Picture Before" style="width:5rem; height:5rem; object-fit:cover;" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- Proposed SAP Movement Section -->
                                            <div class="row mt-3">
                                                <div class="col-12">
                                                    <hr>
                                                    <h5 class="text-dark">
                                                        <i class="fa fa-info-circle mr-2 text-success mb-3"></i>Proposed SAP Movement
                                                    </h5>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label>Disposition<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="dispositionAdd"></select>
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label>Source Sloc<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="source_sloc"></select>
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label>Destination Sloc<span class="text-danger">*</span></label>
                                                        <select class="form-control" id="dest_sloc"></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Submit Button -->
                            <div class="col-12">
                                <label style="font-size:12pt;"></label>
                                <div class="row d-flex justify-content-center">
                                    <div class="col-3 mx-auto">
                                        <button class="btn btn-info btn-block" id="create_QA"><i class="fas fa-pen"></i> Submit </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="show_image" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Image Preview</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <img id="enlargedImage" src="" alt="" class="img-fluid">
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="imageModal" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#3dcd58">
                <h5 class="text-white">
                    <i class="fa fa-info-circle mr-2"></i> Picture <span id="test-id"></span>
                </h5>
                <input onchange="readimgng(this);" type="file" id="image_ng_upload" name="image_ng_upload" accept=".jpg, .jpeg, .png" hidden />
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <center>
                    <h6>PICTURE</h6>
                </center>
                <img id="image" src="" alt="No Image" style="width: 50%;">
                <hr style="height:2px;border-width:0;color:gray;background-color:gray;width:70%">
                <p id="image-filename"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Tutup</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="modal_take" tabindex="-1" role="dialog" aria-labelledby="modal_take" aria-hidden="true">
    <div class="modal-lg modal-dialog dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cameraModalLabel">Take NG Picture</h5>
                <button type="button" class="close closetake" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6 text-center">
                        <div class="frame" style="border: 2px solid #82828282; padding: 10px; height: 450px; display: flex; justify-content: center; align-items: center;">
                            <h6 style="position: absolute; top: 10px; background: white; padding: 0 10px;">Real-Time Camera</h6>
                            <video id="video" autoplay playsinline style="width: auto; height: 100%; display: none;"></video>
                            <div id="cameraPlaceholder" style="width: 100%; height: 100%; background: #eaeaea; display: flex; justify-content: center; align-items: center; border: 1px dashed #ccc;">
                                <p style="color: #888;">Camera feed will appear here</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 text-center">
                        <div class="frame" style="border: 2px solid #82828282; padding: 10px; height: 450px; display: flex; justify-content: center; align-items: center;">
                            <h6 style="position: absolute; top: 10px; background: white; padding: 0 10px;">Captured Image</h6>
                            <canvas id="canvasCaptured" style="display: none; width: auto; height: 100%;"></canvas>
                            <img id="captured_image" style="width: auto; height: 100%;" />
                            <div id="canvasPlaceholder" style="width: 100%; height: 100%; background: #eaeaea; display: flex; justify-content: center; align-items: center; border: 1px dashed #ccc;">
                                <p style="color: #888;">Captured image will appear here</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="captureButton" onclick="capturePhoto()">Capture</button>
                <button type="button" class="btn btn-success" id="saveButton" onclick="savePhoto()">Save</button>
            </div>
        </div>
    </div>
</div>
<div id="modal_upload" class="modal fade" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header text-white bg-success">
                <h5><i class="fa fa-info-circle mr-2"></i> Upload New Request</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row ml-2 mr-2">
                    <div class="col-6">
                        <div class="form-group">
                            <label style="font-size:10pt;font-weight:bold;">Download Template </label>
                            <a class="btn btn-success d-block" href="~/template/templateNewRequest.xlsx">Download</a>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-group mr-2 ml-2">
                            <label style="font-size:10pt;font-weight:bold;">Upload File<span style="color: red; font-weight:bold;">*</span></label>
                            <input type="file" id="fileexcel" class="form-control form-control-sm file-upload" name="myExcelData" />
                        </div>
                    </div>
                    <div class="col-12">
                        <label style="font-size:12pt;"></label>
                        <div class="row d-flex justify-content-center">
                            <div class="col-3 mx-auto">
                                <button class="btn btn-success btn-block" id="upload_Data"><i class="fas fa-upload"></i> Upload Master Data </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/lib/adminlte/plugins/chart.js/Chart.min.js"></script>
    <script src="~/lib/adminlte/plugins/chart.js/chartjs-plugin-datalabels@1.1.2.js"></script>
    <script src="~/lib/xlsx.full.min.js"></script>
    <script>

        $("#create_QA").click(function () {
            var req_id = $('#req_id').val();
            var sesa_id = $('#usr_sesa').val();
            var reference = $('#referenceAdd').find(':selected').text();
            var box_type = $('#boxtypedAdd').find(':selected').text();
            var quantity = $('#qtyxx2').val();
            var rack = $('#rackAdd').find(':selected').text();
            var row = $('#rowAdd').find(':selected').text();
            var column = $('#columnAdd').find(':selected').text();
            var pic = $('#PICAdd').find(':selected').text();
            var max_aging = $('#max_aging').val();
            var remark = $('#remarkAdd').find(':selected').text();
            var ppap = $('#ppapAdd').val();
            var source_issue = $('#issuesource').find(':selected').text();
            var issue_category = $('#issuecategory').find(':selected').text();
            var issue_detail = $('#issuedesc').val();
            var disposition = $('#dispositionAdd').find(':selected').text();
            var sloc = $('#source_sloc').val();
            var dest_sloc = $('#dest_sloc').val();

            var fileInput = document.getElementById('actual-btn');
            var hasFile = fileInput.files.length > 0 || $('#picture-taken').text() === 'A Picture Has been Taken';
            var filePicture = "";
            var blob = "";
            const canvaspicture = document.getElementById('canvasCaptured');

            if (remark == "SIL" && (ppap == "" || ppap == null)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please Fill in the PPAP ID and check all the required fields!'
                });
            }
            else if (
                reference == "" || reference == null ||
                box_type == "" || box_type == null ||
                quantity == "" || quantity == null ||
                rack == "" || rack == null ||
                row == "" || row == null ||
                column == "" || column == null ||
                pic == "" || pic == null ||
                max_aging == "" || max_aging == null ||
                remark == "" || remark == null ||
                source_issue == "" || source_issue == null ||
                issue_category == "" || issue_category == null ||
                issue_detail == "" || issue_detail == null ||
                disposition == "" || disposition == null ||
                sloc == "" || sloc == null ||
                dest_sloc == "" || dest_sloc == null
            ) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please Fill in All the requirements first!'
                });
            } else if (!hasFile) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please upload or capture an image!'
                });
            } else {
                const formData = new FormData();
                formData.append('sesa_id', sesa_id);
                formData.append('req_id', req_id);
                formData.append('reference', reference);
                formData.append('box_type', box_type);
                formData.append('quantity', quantity);
                formData.append('rack', rack);
                formData.append('row', row);
                formData.append('column', column);
                formData.append('pic', pic);
                formData.append('max_aging', max_aging);
                formData.append('remark', remark);
                formData.append('ppap', ppap);
                formData.append('source_issue', source_issue);
                formData.append('issue_category', issue_category);
                formData.append('issue_detail', issue_detail);
                formData.append('disposition', disposition);
                formData.append('sloc', sloc);
                formData.append('dest_sloc', dest_sloc);

                if (fileInput.files.length > 0) {
                    var fileUpload = fileInput.files[0];
                    formData.append('file', fileUpload);
                } else if ($('#picture-taken').text() === 'A Picture Has been Taken' && canvaspicture.toDataURL()) {
                    // Format current date and time for filename
                    const now = new Date();
                    const dateTimeString = now.getFullYear() +
                        '-' + String(now.getMonth() + 1).padStart(2, '0') +
                        '-' + String(now.getDate()).padStart(2, '0') +
                        '_' + String(now.getHours()).padStart(2, '0') +
                        '-' + String(now.getMinutes()).padStart(2, '0') +
                        '-' + String(now.getSeconds()).padStart(2, '0');

                    blob = dataURItoBlob(canvaspicture.toDataURL());
                    formData.append('file', blob, "TakenPicture-" + dateTimeString + ".png");
                }

                Swal.fire({
                    title: 'Create this Request Data?',
                    text: "Are you sure you want to add this Request Data?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#dc3545',
                    confirmButtonText: 'Yes!',
                    cancelButtonText: 'No!',
                    showLoaderOnConfirm: true,
                    preConfirm: function () {
                        return new Promise(function (resolve, reject) {
                            $.ajax({
                                type: "POST",
                                url: "@Url.Action("CreateRequest", "User")",
                                data: formData,
                                processData: false,
                                contentType: false,
                                success: function (response) {
                                    console.log(response); // For debugging
                                    if (response && response.success === true) {
                                        Swal.fire({
                                            title: 'Added Successfully!',
                                            text: 'Request Data Added Successfully!',
                                            icon: 'success'
                                        }).then(function () {
                                            window.location.href = '@Url.Action("WaitingApproval", "User")';
                                        });
                                    } else {
                                        Swal.fire('Error!', 'Failed to add the data.', 'error');
                                    }
                                },
                                error: function (xhr, status, error) {
                                    console.error(error);
                                    Swal.fire('Error!', 'There was an error adding the data.', 'error');
                                }
                            });
                        });
                    }
                });
            }
        });

        let isSearch = false;

        $(document).ready(function () {


            $('#boxtypedAdd').select2({
                placeholder: 'Select Box Type',
                width: '100%',
                ajax: {
                    url: "@Url.Action("GetBoxType")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#remarkAdd').select2({
                placeholder: 'Select Remark',
                width: '100%',
                ajax: {
                    url: "@Url.Action("GetRemarkFilter")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#issuesource').select2({
                placeholder: 'Select Source Issue',
                width: '100%',
                ajax: {
                    url: "@Url.Action("GetSourceIssueFilter")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term
                            //sector: 'none'
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#source_sloc').select2({
                placeholder: 'Select Source Sloc',
                width: '100%',
                ajax: {
                    url: "@Url.Action("GetSourceSloc")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term,
                            //sector: 'none'
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            }).on('change', function () {
                var selectedSourceSloc = $(this).val();
                $('#dest_sloc').val(null).trigger('change');
            });


            $('#dest_sloc').select2({
                placeholder: 'Select Destination Sloc',
                width: '100%',
                ajax: {
                    url: "@Url.Action("GetDestinationSloc")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term,
                            sector: $('#source_sloc').val()
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#issuecategory').select2({
                placeholder: 'Select Issue Category',
                width: '100%',
                ajax: {
                    url: "@Url.Action("GetIssueCategory")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term,
                            //sector: 'none'
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#referenceAdd').select2({
                placeholder: 'Select Reference',
                width: '100%',
                tags: true,
                ajax: {
                    url: "@Url.Action("GetReferenceFilter")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term,
                            family: 'none'
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#rackAdd').select2({
                placeholder: 'Select Rack',
                width: '100%',
                tags: true,
                ajax: {
                    url: "@Url.Action("GetRackFilter")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term,
                            family: 'none'
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#rowAdd').select2({
                placeholder: 'Select Row',
                width: '100%',
                tags: true,
                ajax: {
                    url: "@Url.Action("GetRowFilter")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term,
                            family: 'none'
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#columnAdd').select2({
                placeholder: 'Select Column',
                width: '100%',
                tags: true,
                ajax: {
                    url: "@Url.Action("GetColumnFilter")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term,
                            family: 'none'
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#issue').select2({
                placeholder: 'Select Issue',
                width: '100%',
                ajax: {
                    url: "@Url.Action("GetIssueFilter")",
                    async: false,
                    data: function (params) {
                        return {
                            family: params.term,
                            //sector: 'none'
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#PICAdd').select2({
                placeholder: 'Select PIC',
                width: '100%',
                ajax: {
                    url: "@Url.Action("GetPicFilter")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $('#dispositionAdd').select2({
                placeholder: 'Select Disposition',
                width: '100%',
                ajax: {
                    url: "@Url.Action("GetDispositionFilter")",
                    async: false,
                    data: function (params) {
                        return {
                            cell: params.term,
                            family: 'none'
                        };
                    },
                    processResults: function (data) {
                        //console.log(data);
                        return {
                            results: data.items
                        }
                    },
                }
            });

            $(function () {
                $('#datetimepicker1').datetimepicker({
                    format: 'DD MMMM YYYY',
                    minDate: new Date()
                });
            });
        })

        function Upload_Excel() {
            $('#modal_upload').modal('show');
        }

        $("#upload_Data").click(function () {
            var formData = new FormData();
            var fileInput = document.getElementById("fileexcel");

            if (fileInput.files.length === 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please fill in all the requirements first!'
                });
            } else {
                var file = fileInput.files[0];

                // Check file format
                var fileExtension = file.name.split('.').pop().toLowerCase();
                if (fileExtension !== 'xlsx' && fileExtension !== 'xls') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'File format is not supported. Please upload an Excel file (.xlsx or .xls)'
                    });
                    return;
                }

                formData.append("myExcelData", file);

                var fileReader = new FileReader();
                fileReader.onload = function (e) {
                    var data = new Uint8Array(e.target.result);
                    var workbook = XLSX.read(data, { type: 'array' });

                    var sheet = workbook.Sheets[workbook.SheetNames[0]];
                    var rows = XLSX.utils.sheet_to_json(sheet);

                    var invalidRows = [];
                    var validRows = [];

                    rows.forEach(function (row, index) {
                        var deadline = new Date(row.deadline);
                        var today = new Date();
                        var differenceInDays = (deadline - today) / (1000 * 3600 * 24);
                        if (differenceInDays > 30) {
                            invalidRows.push(index + 2); // Row numbers start from 2
                        } else {
                            validRows.push(row);
                        }
                    });

                    var confirmText = 'Request open max deadline 30 days ahead. Exceeding requests not processed. Total Data: ' + (validRows.length + invalidRows.length) + ', Successful Inserts: ' + validRows.length + ', Unprocessed Inserts: ' + invalidRows.length + ' (Deadline is more than 30 days on the line: ' + invalidRows.length + ' rows (' + invalidRows.join(', ') + '))';

                    Swal.fire({
                        title: 'Confirm your Request?',
                        text: confirmText,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#28a745',
                        cancelButtonColor: '#dc3545',
                        confirmButtonText: 'Yes!',
                        cancelButtonText: 'No!',
                        showLoaderOnConfirm: true,
                        preConfirm: function () {
                            return new Promise(function (resolve, reject) {
                                $.ajax({
                                    type: "POST",
                                    async: false,
                                    contentType: false,
                                    processData: false,
                                    url: "@Url.Action("UploadNewRequest", "User")",
                                    data: formData,
                                    success: function (data) {
                                        if (data.success) {
                                            Swal.fire({
                                                title: 'Added Successfully!',
                                                text: 'Your request has been added',
                                                icon: 'success'
                                            }).then(function () {
                                                window.location.href = '@Url.Action("WaitingApproval", "User")';
                                            });
                                        } else {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Error',
                                                text: data.message || 'Failed to upload data. Please double check the format and completeness of the data according to the template.'
                                            });
                                        }
                                    },
                                    complete: function () {
                                        $('#spinner_loading').hide();
                                    }
                                });
                            });
                        }
                    });
                };
                fileReader.readAsArrayBuffer(file);
            }
        });

        function disDeptCheck(that) {
            console.log(that.options[that.selectedIndex].text);
            if (that.options[that.selectedIndex].text == 'SIL') {
                console.log('yes');
                $('#ppapAdd').prop('disabled', false);
            } else {
                console.log('no');
                $('#ppapAdd').prop('disabled', true);
                $('#ppapAdd').val("");
            }
        }
        function issueDeptCheck(that) {
            if (!that.value) {
                console.log('yes');
                $('#issuedesc').prop('disabled', true);
            } else {
                console.log('no');
                $('#issuedesc').prop('disabled', false);
            }
        }


        async function readimgng(input) {
            if (input.files && input.files[0]) {
                let file = input.files[0];
                await handleImageUpload(file, '#image');
            } else {
                document.getElementById("image").src = "";
            }
        }


        async function readimgadd(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                var fileName = input.files[0].name;
                $('#picture-taken').text('No Picture Taken');
                $('#file-chosen').text(fileName);
                let file = input.files[0];
                await handleImageUpload(file, '#img-preview');

                $('#reset-btn').show();
                $('#reset-taken').hide();
            } else {
                document.getElementById("img-preview").value = "";
            }
        }

        async function handleImageUpload(file, imgSelector) {
            let originalSize = (file.size / 1024).toFixed(2); // size in KB
            console.log(originalSize);

            if (file.size > 500000) { // 500 KB
                Swal.fire({
                    title: 'Large File Detected!',
                    icon: 'warning',
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    html: `
                                                        <p>Your uploaded picture is ${originalSize} KB. Which is still above 500 KB.</p><br />
                                                        <div class="spinner-border text-primary" role="status"></div>
                                                        <p>Compressing...</p>
                                            `
                });

                let compressedFile = await compressImage(file);
                let attempts = 1; // Initialize compression attempts

                // Continue compressing until the file size is less than 500 KB or attempts exceed 10
                while (compressedFile.size >= 500000 && attempts < 20) {
                    compressedFile = await compressImage(compressedFile);
                    attempts++;
                }

                // Check if the file is still too large after 10 attempts
                if (compressedFile.size >= 500000) {
                    Swal.close();
                    const compressedSize = (compressedFile.size / 1024).toFixed(2); // size in KB
                    Swal.fire({
                        title: 'Compression Warning!',
                        text: `The file size is ${compressedFile.size} bytes which is still above 500 KB after ${attempts} attempts. Will Take this as the last result. Compressed image size: ${compressedSize} KB.`,
                        icon: 'warning',
                    });

                    // Display the compressed image
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        document.querySelector(imgSelector).src = e.target.result;
                    };
                    reader.readAsDataURL(compressedFile);
                } else {
                    Swal.close();
                    const compressedSize = (compressedFile.size / 1024).toFixed(2); // size in KB
                    Swal.fire({
                        title: 'Image Compression Complete!',
                        text: `Compressed image size: ${compressedSize} KB.`,
                        icon: 'success',
                    });

                    // Display the compressed image
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        document.querySelector(imgSelector).src = e.target.result;
                    };
                    reader.readAsDataURL(compressedFile);
                }
            } else {
                // If the file is already small enough, display it directly
                const reader = new FileReader();
                reader.onload = function (e) {
                    document.querySelector(imgSelector).src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        }

        let quality = 0.7; // Set initial quality

        function compressImage(file) {
            return new Promise((resolve) => {
                const img = new Image();
                const reader = new FileReader();

                reader.onload = function (e) {
                    img.src = e.target.result;
                };

                img.onload = function () {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);

                    // Convert canvas to Blob
                    canvas.toBlob((blob) => {
                        const compressedFile = new File([blob], file.name, { type: 'image/jpeg' });

                        // Adjust quality based on the size of the compressed file
                        if (compressedFile.size >= 500000) {
                            quality = Math.max(0.1, quality - 0.1); // Decrease quality, but not below 0.1
                        }

                        resolve(compressedFile);
                    }, 'image/jpeg', quality);
                };

                reader.readAsDataURL(file);
            });
        }

        $('#reset-btn').on('click', function () {
            $('#actual-btn').val(null);
            $('#img-preview').attr('src', '../assets/CameraOK.png')
            $('#file-chosen').text('No File Chosen');
            $(this).hide();
        });

        function button_detail(id) {
            $('#modal_detail').modal('show');
            $('#detail_id').html(id);
            $('#tk_id').val(id);

            $('#tbl_detail3').html('');
            var table = $("#tbl_detail3");
            $('#tbl_approvedd').html('');
            var table1 = $("#tbl_approvedd");
            $('#table_review1').html('');
            var table2 = $("#table_review1");
            $('#table_review2').html('');
            var table3 = $("#table_review2");

            $.ajax({
                url: '@Url.Action("GetRouteQaINP")',
                type: "POST",
                success: function (data) {
                    table.html(data);
                }
            });

            $.ajax({
                url: '@Url.Action("GetApprovedQa")',
                type: "POST",
                data: {
                    tk_id: id
                },
                success: function (data) {
                    table1.html(data);
                }
            });

            $.ajax({
                url: '@Url.Action("GetReviewQaINP")',
                type: "POST",
                data: {
                    tk_id: id
                },
                success: function (data) {
                    table2.html(data);
                }
            });

            $.ajax({
                url: '@Url.Action("GetReviewQaINP2")',
                type: "POST",
                data: {
                    tk_id: id
                },
                success: function (data) {
                    table3.html(data);
                }
            });
        }

        function btn_picture(id) {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetImages", "FPA")",
                data: { id: id },
                success: function (data) {
                    $("#image").attr("src", "../images/rack/" + data.picture);
                    $("#image-filename").text(data.picture); // Set the file name below the image
                    $("#test-id").html(id);
                    // ('#tk_id').val(id);
                    $("#imageModal").modal("show");
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching image:', error);
                }
            });
        }

        let stream; // Declare a variable to hold the stream
        $("button[name=btn_ng_take]").click(function () {
            // Initialize webcam
            $("#video").css("display", "block");
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(s => {
                    stream = s; // Store the stream
                    const video = document.getElementById('video');
                    video.srcObject = stream;
                    $("#cameraPlaceholder").css("display", "none");
                })
                .catch(err => console.error("Webcam initialization failed:", err));
            $("#modal_take").modal("show");
        })
        // Function to stop the webcam
        function stopWebcam() {
            if (stream) {
                // Stop all video tracks
                stream.getTracks().forEach(track => track.stop());
            }
        }

        // Add event listener to the close button
        document.querySelector('.closetake').addEventListener('click', stopWebcam);

        let dataUrl;
        function capturePhoto() {
            const video = document.getElementById('video');
            const canvas = document.getElementById('canvasCaptured');
            const capturedImage = document.getElementById('captured_image');

            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0);

            dataUrl = canvas.toDataURL();
            capturedImage.src = dataUrl;

            $("#canvasPlaceholder").css("display", "none");
        }

        function savePhoto() {
            const preview = document.getElementById('img-preview');

            preview.src = dataUrl;

            $("#actual-btn").val(null);

            $('#file-chosen').text('No File Chosen');
            $('#picture-taken').text('A Picture Has been Taken');
            $('#reset-taken').show(); // Show the reset button when a picture is taken
            $('#reset-btn').hide();
            $("#modal_take").modal("hide");
            stopWebcam();
        }

        $("#reset-taken").click(function () {
            $('#actual-btn').val(null);
            $('#file-chosen').text('No File Chosen');
            $('#picture-taken').text('No Picture Taken');
            $('#img-preview').attr('src', '~/assets/CameraNG.png');
            $(this).hide();
        });

        function dataURItoBlob(dataURI) {
            // Convert base64/URLEncoded data component to raw binary data
            var byteString;
            if (dataURI.split(',')[0].indexOf('base64') >= 0)
                byteString = atob(dataURI.split(',')[1]);
            else
                byteString = unescape(dataURI.split(',')[1]);

            // Separate out the mime component
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

            // Write the bytes of the string to a typed array
            var ia = new Uint8Array(byteString.length);
            for (var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }

            return new Blob([ia], { type: mimeString });
        }
    </script>
}



